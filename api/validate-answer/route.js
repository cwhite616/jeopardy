"use strict";(()=>{var e={};e.id=921,e.ids=[921],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2048:e=>{e.exports=require("fs")},2615:e=>{e.exports=require("http")},5240:e=>{e.exports=require("https")},5315:e=>{e.exports=require("path")},8621:e=>{e.exports=require("punycode")},6162:e=>{e.exports=require("stream")},7360:e=>{e.exports=require("url")},1764:e=>{e.exports=require("util")},2623:e=>{e.exports=require("worker_threads")},1568:e=>{e.exports=require("zlib")},7561:e=>{e.exports=require("node:fs")},4492:e=>{e.exports=require("node:stream")},2477:e=>{e.exports=require("node:stream/web")},4233:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>m,patchFetch:()=>g,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>h,staticGenerationAsyncStorage:()=>d});var s={};t.r(s),t.d(s,{POST:()=>u});var o=t(3278),n=t(5002),a=t(4877),i=t(5732),p=t(1309);async function u(e){try{if(!process.env.API_KEY_OPENAI)return console.error("OpenAI API key is not configured"),p.NextResponse.json({error:"OpenAI API key is not configured"},{status:500});let{playerAnswer:r,correctQuestion:t}=await e.json();console.log("Received request:",{playerAnswer:r,correctQuestion:t});let s=new i.Pp({apiKey:process.env.API_KEY_OPENAI});try{let e=await s.chat.completions.create({model:"gpt-4",messages:[{role:"system",content:"You are judging answers in a Jeopardy game. When comparing the player's response to the correct answer, ignore phrases like 'What is', 'Who is', 'Where is', etc. Focus only on the core concept being answered. The answer must convey the same meaning but does not need to use identical wording. Be strict about the core concept being correct. Don't stress about spelling, punctuation, or other minor details."},{role:"user",content:`The correct question is: "${t}"
The player's response was: "${r}"
Is this answer correct? Reply with just 'CORRECT' or 'INCORRECT'.`}]}),o=e.choices[0].message.content?.trim();return p.NextResponse.json({isCorrect:"CORRECT"===o})}catch(r){console.error("OpenAI API error:",r);let e=429===r.status||r.message?.includes("quota")||r.error?.message?.includes("quota");return p.NextResponse.json({error:e?"QUOTA_ERROR":"OpenAI API error",details:r.message},{status:r.status||500})}}catch(e){return console.error("Request processing error:",e),p.NextResponse.json({error:"Failed to process request",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let c=new o.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/validate-answer/route",pathname:"/api/validate-answer",filename:"route",bundlePath:"app/api/validate-answer/route"},resolvedPagePath:"/Users/charlie.white/src/jeopardy/app/api/validate-answer/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:l,staticGenerationAsyncStorage:d,serverHooks:h}=c,m="/api/validate-answer/route";function g(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:d})}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[379,833,732],()=>t(4233));module.exports=s})();